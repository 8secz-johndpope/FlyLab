{"ast":null,"code":"import _Number$isNaN from \"@babel/runtime-corejs2/core-js/number/is-nan\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nvar _jsxFileName = \"/Users/Arthur/FlyLab/example/demo-next/components/Calculator.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport TemperatureInput from './TemperatureInput';\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, \"The water would boil.\");\n  }\n\n  return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"The water would not boil.\");\n}\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = _parseFloat(temperature);\n\n  if (_Number$isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({\n      scale: 'c',\n      temperature\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      scale: 'f',\n      temperature\n    });\n  }\n\n  render() {\n    const {\n      scale\n    } = this.state;\n    const {\n      temperature\n    } = this.state;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, __jsx(TemperatureInput, {\n      scale: \"c\",\n      temperature: celsius,\n      onTemperatureChange: this.handleCelsiusChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(TemperatureInput, {\n      scale: \"f\",\n      temperature: fahrenheit,\n      onTemperatureChange: this.handleFahrenheitChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(BoilingVerdict, {\n      celsius: _parseFloat(celsius),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Arthur/FlyLab/example/demo-next/components/Calculator.js"],"names":["React","TemperatureInput","BoilingVerdict","props","celsius","toCelsius","fahrenheit","toFahrenheit","tryConvert","temperature","convert","input","output","rounded","Math","round","toString","Calculator","Component","constructor","state","scale","handleCelsiusChange","bind","handleFahrenheitChange","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TemperatureInput from './TemperatureInput';\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: '', scale: 'c',\n    };\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({ scale: 'c', temperature });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({ scale: 'f', temperature });\n  }\n\n  render() {\n    const { scale } = this.state;\n    const { temperature } = this.state;\n    const celsius = scale === 'f' ?\n      tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ?\n      tryConvert(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} />\n        <BoilingVerdict celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}